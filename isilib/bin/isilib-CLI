#!/usr/bin/env python3

import isilib
import networkx as nx
import argparse
import os
import sys
import readline

args = argparse.Namespace()

def argumentParser():
    parser = argparse.ArgumentParser(description="isilib's simple command line interface")
    parser.add_argument("files", default = [], nargs = '*')
    parser.add_argument("--verbose", "-v", action = 'store_true' , default = False, help = "Verbose mode, every step is printed")
    parser.add_argument("--progress", "-p", action = 'store_true' ,default = False, help = "Progress bar mode, shows progress bars where appropriate")
    parser.add_argument("--suffix", "-s", default = '', help = "Progress bar mode, shows progress bars where appropriate")
    return parser.parse_args()

def inputMenu(inputDict, header = None, footer = None, errorMsg = 'That is not an option please select a different value.', promptMsg = 'What is your selection: '):
    s = ''
    if header:
        s += '{}\n'.format(header)
    for k in inputDict.keys():
        s += '{0}) {1}\n'.format(k,inputDict[k])
    if footer:
        s += '{}\n'.format(footer)
    print(s, end = '')
    selection = input(promptMsg)
    if selection in inputDict:
        return selection
    else:
        return inputMenu(inputDict, header = header, footer = footer, errorMsg = errorMsg, promptMsg = promptMsg)

def controlledPrint(s):
    if args.verbose:
        print(s)
    else:
        pass


def getFiles(flist):
    tmpRC = isilib.RecordCollection(name = '')
    if len(flist) > 0:
        for f in flist:
            path = os.path.abspath(os.path.expanduser(f))
            if os.path.exists(path):
                tmpRC = tmpRC + isilib.RecordCollection(path, extension = args.suffix)
            else:
                raise TypeError(path + " is not an existing file or directory")
        return tmpRC
    else:
        nflist = input("What files or directorys do you want to extract a network from: ")
        paths = [os.path.abspath(os.path.expanduser(f)) for f in nflist.split(' ')]
        badPaths = [f for f in paths if not os.path.exists(f)]
        if len(badPaths) > 1:
            print(', '.join(badPaths[:-1]) + " and " + badPaths[-1] + " are not existing files or directorys")
            return(getFiles([]))
        elif len(badPaths) == 1:
            print(badPaths[0] + " is not an existing file or directory")
            return(getFiles([]))
        else:
            return(getFiles(paths))

def getNetwork(inRC):
    print("""What type of network do you wish to create?
1) a one-mode network
2) a two-mode network
3) an n-mode network
4) a citation network
5) a co-citation network
6) a co-authorship network""")
    netType = input("Input the number corresponding to the type of network you wish to generate: ")
    try:
        netID = int(netType)
        if netID > 7 or netID < 1:
            raise ValueError
    except ValueError:
        print("Not a valid selection")
        return getNetwork(inRC)
    else:
        if netID == 4:
            print("Generating citation network")
            return inRC.citationNetwork()
        elif netID == 5:
            print("Generating co-citation network")
            return inRC.coCiteNetwork()
        elif netID == 6:
            print("Generating co-authorship network")
            return inRC.coAuthNetwork()
        else:
            return getNetwork(inRC)

def  outputNetwork(grph):
    print("""How do you wnat the network to be written:
1) edge list and node attribute list
2) edge list
3) node attribute list
4) graphml (SLOW)""")
    outID = input("Input the number corresponding to the type of output you want: ")
    try:
        outID = int(outID)
        if outID > 4 or outID < 1:
            raise ValueError
    except ValueError:
        print("Not a valid selection")
        return outputNetwork(grph)
    else:
        outName = input("What do you want it to be named: ")
        if outID == 1:
            isilib.write_graph(grph, outName)
        elif outID == 2:
            isilib.write_edgeList(grph, outName + ".csv")
        elif outID == 3:
            isilib.write_nodeAttributeFile(grph, outName + ".csv")
        elif outID == 4:
            nx.write_graphml(grph, outName + ".graphml")
        else:
            print("Not a valid selection")
            return outputNetwork(grph)

def main():
    global args
    args = argumentParser()
    RC = getFiles(args)
    G = getNetwork(args, RC)
    outputNetwork(args, G)





    """
    if args.progress:
        setattr(isilib, 'VERBOSE_MODE', True)
    controlledPrint(args.__dict__)
    try:
        print(isilib.VERBOSE_MODE)
        RC = getFiles(args.files)
    except TypeError as e:
        print(str(e))
        sys.exit()
    G = getNetwork(RC)
    outputNetwork(G)
    """



if __name__ == "__main__":
    main()
